
// ******************************** //
// ceph reference :
// https://github.com/ceph/ceph/blob/285aec13a84ac945236fa66b35c461cce75e4c7d/src/cls/refcount/cls_refcount.cc

// ******************************** //
// current set of objects
object_table( "object1" )@1 ;
object_table( "object2" )@1 ;
object_table( A )@next :- object_table( A ) ;

// ******************************** //
// helpful relations for bypassing
// c4 equation limitations.

set_true_refbool( "object1", "TRUE" )@1 ;
set_true_refbool( "object2", "TRUE" )@1 ;

all_refstrs( "key0" )@1 ;
all_refstrs( "key1" )@1 ;
all_refstrs( "key5" )@1 ;

true_refbool( "TRUE" )@1 ;
false_refbool( "FALSE" )@1 ;

default_refstr( "object1", "DEFAULT" )@1 ;
default_refstr( "object2", "DEFAULT" )@1 ;
default_refbool( "object1", "FALSE" )@1 ;
default_refbool( "object2", "FALSE" )@1 ;

// ******************************** //
// initialization rule

obj_refcount( OBID, REFSTR, REFBOOL ) :- object_table( OBID ), 
                                         default_refstr( OBID, REFSTR ), 
                                         default_refbool( OBID, REFBOOL ) ;

// ******************************** //
// persistance rule

obj_refcount( OBID, REFSTR, REFBOOL )@async :- obj_refcount( OBID, REFSTR, REFBOOL ),
                                               notin get_calls( OBID, _ ),
                                               notin put_calls( OBID, _ ) ;

// ******************************** //
// cls_rc_refcount_get
// set reference strings to true in refcount per targeted object

get_calls( "object1", "key0" )@1 ;
get_calls( "object2", "key1" )@1 ;
get_calls( "object3", "key5" )@1 ;

obj_refcount( OBID, REFSTR, REFBOOL )@next :- obj_refcount( OBID, _, _ ), 
                                              get_calls( OBID, REFSTR ), 
                                              set_true_refbool( OBID, REFBOOL) ;

// ******************************** //
// cls_rc_refcount_put
// check if keys exist in refcount

// put == free ref. get == set ref.

put_calls( "object1", "key0" )@1 ;
put_calls( "object2", "key1" )@1 ;
put_calls( "object3", "key5" )@1 ;

found_keys( OBID, REFSTR, REFBOOL ) :- obj_refcount( OBID, REFSTR, REFBOOL ), 
                                       put_calls( OBID, REFSTR ), 
                                       true_refbool( REFBOOL ) ;


// ******************************** //
// cls_rc_refcount_set
// map all existing keys to true in refcount

obj_refcount( OBID, REFSTR, REFBOOL ) :- obj_refcount( OBID, REFSTR, _ ), 
                                         true_refbool( REFBOOL ) ;

// trying to gc the leftover obid,default,false,1 tuples.
//obj_refcount( OBID, REFSTR, REFBOOL ) :- obj_refcount( OBID, REFSTR, REFBOOL ),
//                                         notin default_refstr( OBID, REFSTR ),
//                                         notin default_refbool( OBID, REFBOOL ) ;


// ******************************** //
// cls_rc_refcount_read
// The cls_rc_refcount_read interface returns the reference count list for a particular object.

read_results( OBID, REFSTR ) :- obj_refcount( OBID, REFSTR, _ ) ;


// ******************************** //
// generate useless prov graph.

pre( STUFF ) :- object_table( STUFF ) ;
post( STUFF ) :- object_table( STUFF ) ;

///////////
//  EOF  //
///////////
